//
// Copyright 2015 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


// FirebaseDemo_ESP8266 is a sample that demo the different functions
// of the FirebaseArduino API.








#include <ESP8266WiFi.h>
#include <FirebaseArduino.h>
#include <Adafruit_BMP085.h> 
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include<assert.h>
unsigned int localPort = 2390;      // local port to listen for UDP packets






unsigned long startTime[7];
unsigned long stopTime[7]; 
char* units[] = {"-1","units1","units2","units3","units4","units5","units6"};






IPAddress timeServerIP; // time.nist.gov NTP server address
//const char* ntpServerName = "2.in.pool.ntp.org";
const char* ntpServerName = "time.nist.gov";
const int NTP_PACKET_SIZE = 48; // NTP time stamp is in the first 48 bytes of the message


byte packetBuffer[ NTP_PACKET_SIZE]; //buffer to hold incoming and outgoing packets
byte packetBuffer2[ NTP_PACKET_SIZE];
// A UDP instance to let us send and receive packets over UDP
WiFiUDP udp;










Adafruit_BMP085 bmp; 




// Set these to run example.
#define FIREBASE_HOST "home-automation-it478.firebaseio.com"
#define FIREBASE_AUTH "GY9fkH3WiYkx1hHPYHTushZD7hmyZyCF7FOwER7L"
#define WIFI_SSID "DeaDshot"
#define WIFI_PASSWORD "1357924680"


class Device{


  char *d_name,*purchaseDate;
  int rating;
  long date;


public:
  Device()
  {
    
  }


  Device(char *de , char *pd , int r , long d)
  {
    d_name = de ;
    purchaseDate = pd;
    rating = r;
    date = d;
  }


};


FirebaseArduino FirebaseStream;


int pin[] = {-1,D0,D3,D4,D5,D6,D8};
void setup() {




  
  Serial.begin(115200);
  pinMode(D0,OUTPUT);
  pinMode(D3,OUTPUT);
  pinMode(D4,OUTPUT);
  pinMode(D5,OUTPUT);
  pinMode(D6,OUTPUT);
  pinMode(D8,OUTPUT);
  bmp.begin();
  // connect to wifi. 
  
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("connecting");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println();
  Serial.print("connected: ");
  Serial.println(WiFi.localIP());


  udp.begin(localPort);


  
  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  FirebaseStream.begin(FIREBASE_HOST, FIREBASE_AUTH);
  FirebaseStream.stream("/devices");




  
  


  if (!bmp.begin()) 
  {
    Serial.println("Could not find BMP180 or BMP085 sensor at 0x77");
    while (1) {
      Serial.print(".");
      }
  }
}


int n = 0;




  char *st[] = {"/devices/device1","/devices/device2","/devices/device3","/devices/device4","/devices/device5" ,"/devices/device6" ,"/devices/device7" ,"/devices/device8"};   




void loop() {
  
  //FirebaseObject fb = Firebase.get("/devices");
 // Serial.print(fb.getInt("rating"));


 
  Serial.println();


  
  


  
  int i;
  delay(2000);
  //i = 1;
  for(i=0;i<8;i++)
  {
     Serial.print("Checking for Device ");
     Serial.println(i+1);


     
     char *st1 = st[i];






     
     
     FirebaseObject fb = Firebase.get(st1);
     
     delay(2000);
      if(fb.getInt("rating")==-1)
     {
      digitalWrite(pin[1+i],LOW);
      Serial.print("No device connected in relay   ");
        Serial.println(i+1);
      
        continue;
     }


     else
     {
        Serial.print("Name = ");
        Serial.println(fb.getString("dname"));
        Serial.print("Rating = ");
        Serial.println(fb.getInt("rating"));
        
        Serial.print("Status = ");
        bool isport = fb.getBool("status");
        Serial.println(isport);
        int port = fb.getInt("port");
        
        
        if(isport)
        {
          digitalWrite(pin[port],HIGH);
        }
        else
        {
          digitalWrite(pin[port],LOW);
        }
     }


     if (FirebaseStream.failed()) {
    Serial.println("ERROR: streaming error");
    Serial.println(FirebaseStream.error());
  }


  
  if (FirebaseStream.available()) {
    FirebaseObject event = FirebaseStream.readEvent();
    String eventType = event.getString("type");
    Serial.println(eventType);
    Serial.print("event: ");
    Serial.println(event.getString("event"));
    Serial.print("path: ");
    String ptr = event.getString("path");
    Serial.println(ptr);
    Serial.print("data: ");
    bool b = event.getBool("data");
    Serial.println(b);


     char ch = ptr[7];
     int fin = ch - '0';
    /*
    if(b==0)
    {
      digitalWrite(pin[fin],LOW);
    }
    */
    String ptr2 = "status";
    if(strstr(ptr.c_str(),ptr2.c_str()))
    {
      if(b==1)
      {
        digitalWrite(pin[fin],HIGH);
        




        WiFi.hostByName(ntpServerName, timeServerIP); 
        
        sendNTPpacket(timeServerIP); // send an NTP packet to a time server
        // wait to see if a reply is available
        delay(1000);
        
        int cb = udp.parsePacket();
        
        
        




        
         udp.read(packetBuffer, NTP_PACKET_SIZE); // read the packet into the buffer


       unsigned long highWord = word(packetBuffer[40], packetBuffer[41]);
      unsigned long lowWord = word(packetBuffer[42], packetBuffer[43]);
       unsigned long secsSince1900 = highWord << 16 | lowWord;
   
      const unsigned long seventyYears = 2208988800UL;
       unsigned long epoch = secsSince1900 - seventyYears;


        Serial.print("epoch when the light is put on is ");
    Serial.println(epoch);
      Serial.print("The UTC time when the device is started is ");       // UTC is the time at Greenwich Meridian (GMT)


      Serial.print("Starting epoch  ");
      Serial.println(epoch);
      Serial.print((((epoch  % 86400L) / 3600))); // print the hour (86400 equals secs per day)
      Serial.print(':');
     if ( ((epoch % 3600) / 60) < 10 ) {
      //// In the first 10 minutes of each hour, we'll want a leading '0'
      Serial.print('0');
    }
    Serial.print((epoch  % 3600) / 60); // print the minute (3600 equals secs per minute)
    Serial.print(':');
    if ( (epoch % 60) < 10 ) {
      // In the first 10 seconds of each minute, we'll want a leading '0'
      Serial.print('0');
    }
    Serial.println(epoch % 60); // print the second
      startTime[fin] = epoch;


  }
  // wait ten seconds before asking for the time again
  
  




  
      else
      {
        digitalWrite(pin[fin],LOW);


         WiFi.hostByName(ntpServerName, timeServerIP); 
        
        sendNTPpacket(timeServerIP); // send an NTP packet to a time server
        // wait to see if a reply is available
        delay(1000);
        
        int cb = udp.parsePacket();
        
          
            udp.read(packetBuffer, NTP_PACKET_SIZE); // read the packet into the buffer


    unsigned long highWord = word(packetBuffer[40], packetBuffer[41]);
    unsigned long lowWord = word(packetBuffer[42], packetBuffer[43]);
    unsigned long secsSince1900 = highWord << 16 | lowWord;
    const unsigned long seventyYears = 2208988800UL;
    unsigned long epoch = secsSince1900 - seventyYears;


    stopTime[fin] = epoch;
    Serial.print("epoch when the light is off is ");
    Serial.println(epoch);


    Serial.print("Just to check whether the earlier start[fin] and end[fin] are different ");
    Serial.print("start[fin] ");
    Serial.println(startTime[fin]);
    Serial.print("stop[fin] ");
    Serial.println(stopTime[fin]);
    
    Serial.print("The UTC time when the device is put off is ");  
    
    
    // UTC is the time at Greenwich Meridian (GMT)
    
      Serial.print("Epoch  ");


    Serial.println(epoch);


    
     Serial.print((((epoch  % 86400L) / 3600))); // print the hour (86400 equals secs per day)
      Serial.print(':');
     if ( ((epoch % 3600) / 60) < 10 ) {
      //// In the first 10 minutes of each hour, we'll want a leading '0'
      Serial.print('0');
     }
      Serial.print((epoch  % 3600) / 60); // print the minute (3600 equals secs per minute)
    Serial.print(':');
    if ( (epoch % 60) < 10 ) {
      // In the first 10 seconds of each minute, we'll want a leading '0'
      Serial.print('0');
    }
    Serial.println(epoch % 60); // print the second
    
     
     unsigned long l1 = ((epoch  % 86400L) / 3600);
     
      l1 = l1 * 3600;
      epoch = epoch - l1;
      
      
      
    unsigned long l2 = (epoch  % 3600) / 60;
    l2 = l2*60;
    epoch = epoch - l2;




    unsigned long l3 = (epoch%60);
    epoch = epoch - l3;
    
   
  // wait ten seconds before asking for the time again
  
  delay(2000);
 
  unsigned long diff = stopTime[fin] - startTime[fin];
      const int n = snprintf(NULL, 0, "%lu", epoch);
      assert(n > 0);
      char buf[n+1];
      int c = snprintf(buf, n+1, "%lu", epoch);
      assert(buf[n] == '\0');
      assert(c == n);


      
  startTime[fin] = 0;
  stopTime[fin] = 0;
  char *char1 = "logs";
  char *char2 = "/";
  char *char3 = buf;




   char *result = (char*)malloc(strlen(char1)+strlen(char2)+strlen(char3)+1);//+1 for the null-terminator
    //in real code you would check for errors in malloc here
    strcpy(result, char1);
    strcat(result, char2);
    strcat(result ,char3);


    
  Serial.print("result   ");
  Serial.println(result);
  
  FirebaseObject ff1 = Firebase.get(result);
  float ft = ff1.getFloat(units[fin]);


  Serial.print("Existing units in the port   ");
  Serial.println(ff1.getFloat(units[fin])); 
  //converting the difference into hours
  float hours = (float)diff/3600.0;
  ft = ft + hours;
  Serial.print("diff hours  ");
  Serial.println(hours);
  char *result2 = (char*)malloc(strlen(result) +strlen(char2)+ strlen(units[fin]) + 1);




 
  strcpy(result2, result);
  strcat(result2, char2);
  strcat(result2, (char*)units[fin]);


Serial.print("result2  ");
Serial.println(result2);
  //FirebaseObject ff2 = Firebase.get(result2);
 // ff1.setFloat(result2,ft);
  
  Firebase.setFloat(result2,ft);
  
  
}


    }    
        
      }
      
      
    }
}




  /*
  Firebase.setFloat("number", 42.0);
  // handle error
  if (Firebase.failed()) {
      Serial.print("setting /number failed:");
      Serial.println(Firebase.error());  
      return;
  }
  delay(1000);


  Serial.print("TEMP180 = ");
  float f = bmp.readTemperature();
  Serial.println(f); // Read temperature in celsius


  Serial.println("Writing to the firebase");
  
  Firebase.setFloat("temperature",f );
  // handle error
  if (Firebase.failed()) {
      Serial.print("setting /number failed:");
      Serial.println(Firebase.error());  
      return;
  }
  delay(1000);


  Serial.print("Pressure = ");
  float f2 = bmp.readPressure();
  Serial.println(f2); 




  
  // update value
  Firebase.setFloat("Pressure",f2);
  // handle error
  if (Firebase.failed()) {
      Serial.print("setting /number failed:");
      Serial.println(Firebase.error());  
      return;
  }
  delay(1000);


  // get value 
  Serial.print("number: ");
  Serial.println(Firebase.getFloat("number"));
  delay(1000);
  
  // remove value
  Firebase.remove("number");
  delay(1000);


  // set string value
  Firebase.setString("message", "hello world");
  // handle error
  if (Firebase.failed()) {
      Serial.print("setting /message failed:");
      Serial.println(Firebase.error());  
      return;
  }
  delay(1000);


  




  // set bool value
  Firebase.setBool("truth", false);
  // handle error
  if (Firebase.failed()) {
      Serial.print("setting /truth failed:");
      Serial.println(Firebase.error());  
      return;
  }
  delay(1000);


  // append a new value to /logs


  String name = Firebase.pushInt("logs", n++);
  // handle error
 
  if (Firebase.failed()) {
      Serial.print("pushing /logs failed:");
      Serial.println(Firebase.error());  
      return;
  }
  Serial.print("pushed: /logs/");
  Serial.println(name);
  delay(1000);


  */










unsigned long sendNTPpacket(IPAddress& address)
{
  Serial.println("sending NTP packet...");
  // set all bytes in the buffer to 0
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  packetBuffer[0] = 0b11100011;   // LI, Version, Mode
  packetBuffer[1] = 0;     // Stratum, or type of clock
  packetBuffer[2] = 6;     // Polling Interval
  packetBuffer[3] = 0xEC;  // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  packetBuffer[12]  = 49;
  packetBuffer[13]  = 0x4E;
  packetBuffer[14]  = 49;
  packetBuffer[15]  = 52;


  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  udp.beginPacket(address, 123); //NTP requests are to port 123
  udp.write(packetBuffer, NTP_PACKET_SIZE);
  udp.endPacket();
}